//Lex part
%{
#include"y.tab.h"
extern int yylval;
%}
%%
[0-9]+ {yylval=atoi(yytext); return NUM;}
[\t];
. {return yytext[0];}
\n {return 0;}
%%

//Yacc part
%{
#include<stdio.h>
#include<stdlib.h>
%}

%token NUM
%left '+' '-'
%left '*' '/'
%%
stmt : e {printf("Result=%d\n",$1);}
     ;
e : e '+' e {$$=$1+$3;}
  | e '-' e {$$=$1-$3;}
  | e '*' e {$$=$1*$3;}
  | e '/' e {$$=$1/$3;}
  |'(' e ')' {$$=$2;}
  | NUM {$$ = $1;}
%%

int main()
{
printf("Enter the expression\n");
yyparse();
}

int yyerror()
{
printf("Invalid expression\n");
exit(0);
}

//recognize strings ‘aaab’, ‘abbb’, ‘ab’ and ‘a’ using the grammar (an bn n>=0).
//Lex part
%{
#include"y.tab.h"
%}

%%
a {return A;}
b {return B;}
. {return yytext[0];}
\n {return 0;}
%%
//Yacc part
%{
#include<stdio.h>
#include<stdlib.h>
%}

%token A B
%%
str : S \n;
S : A S B
  | ;
%%

int main()
{
printf("Enter the string\n");
yyparse();
printf("Valid\n");
}

int yyerror()
{
printf("Invalid\n");
exit(0);
}



